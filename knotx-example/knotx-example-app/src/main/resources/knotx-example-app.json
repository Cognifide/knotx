{
  "modules": [
    "server=io.knotx.server.KnotxServerVerticle",
    "httpRepo=io.knotx.repository.HttpRepositoryConnectorVerticle",
    "fsRepo=io.knotx.repository.FilesystemRepositoryConnectorVerticle",
    "splitter=io.knotx.knot.splitter.FragmentSplitterVerticle",
    "assembler=io.knotx.knot.assembler.FragmentAssemblerVerticle",
    "hbsKnot=io.knotx.knot.templating.HandlebarsKnotVerticle",
    "serviceKnot=io.knotx.knot.service.ServiceKnotVerticle",
    "actionKnot=io.knotx.knot.action.ActionKnotVerticle",
    "serviceAdapter=io.knotx.adapter.service.http.HttpServiceAdapterVerticle",
    "actionAdapter=io.knotx.adapter.action.http.HttpActionAdapterVerticle",
    "mockRepo=io.knotx.mocks.MockRemoteRepositoryVerticle",
    "mockService=io.knotx.mocks.MockServiceVerticle",
    "gatewatKnot=io.knotx.gateway.GatewayKnotVerticle",
    "reqProcessorKnot=io.knotx.gateway.RequestProcessorKnotVerticle",
    "respProviderKnot=io.knotx.gateway.ResponseProviderKnotVerticle"
  ],
  "config": {
    "server": {
      "options": {
        "config": {
          "serverOptions": {
            "port": 8092,
            "logActivity": true
          },
          "defaultFlow": {
            "repositories": [
              {
                "path": "/content/local/.*",
                "address": "knotx.core.repository.filesystem"
              },
              {
                "path": "/content/.*",
                "address": "knotx.core.repository.http"
              },
              {
                "path": "/img/.*",
                "address": "knotx.core.repository.http",
                "doProcessing": false
              }
            ],
            "routing": {
              "GET": {
                "items": [
                  {
                    "path": "/content/.*",
                    "address": "knotx.knot.action",
                    "onTransition": {
                      "next": {
                        "address": "knotx.knot.service",
                        "onTransition": {
                          "next": {
                            "address": "knotx.knot.handlebars"
                          }
                        }
                      }
                    }
                  }
                ]
              },
              "POST": {
                "items": [
                  {
                    "path": "/content/.*",
                    "address": "knotx.knot.action",
                    "onTransition": {
                      "next": {
                        "address": "knotx.knot.service",
                        "onTransition": {
                          "next": {
                            "address": "knotx.knot.handlebars"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            }
          },
          "customFlow": {
            "routing": {
              "GET": {
                "items": [
                  {
                    "path": "/customFlow/.*",
                    "address": "knotx.gateway.gatewayknot",
                    "onTransition": {
                      "next": {
                        "address": "knotx.gateway.requestprocessor"
                      }
                    }
                  }
                ]
              },
              "PUT": {
                "items": [
                  {
                    "path": "/customFlow/.*",
                    "address": "knotx.gateway.gatewayknot",
                    "onTransition": {
                      "next": {
                        "address": "knotx.gateway.requestprocessor"
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      }
    },
    "mockRepo": {
      "options": {
        "config": {
          "mockDataRoot": "mock/repository",
          "httpPort": 3001
        }
      }
    },
    "mockService": {
      "options": {
        "config": {
          "mockDataRoot": "mock/service",
          "bouncing": true,
          "httpPort": 3000
        }
      }
    },
    "reqProcessorKnot": {
      "options": {
        "config": {
          "address": "knotx.gateway.requestprocessor"
        }
      }
    },
    "actionAdapter": {
      "options": {
        "config": {
          "address": "knotx.adapter.action.http",
          "clientOptions": {
            "maxPoolSize": 1000,
            "keepAlive": false,
            "logActivity": true
          },
          "customRequestHeader": {
            "name": "Server-User-Agent",
            "value": "Knot.x"
          },
          "services": [
            {
              "path": "/service/mock/.*",
              "domain": "localhost",
              "port": 3000,
              "allowedRequestHeaders": [
                "Content-Type",
                "X-*"
              ]
            },
            {
              "path": "/service/.*",
              "domain": "localhost",
              "port": 8080,
              "allowedRequestHeaders": [
                "Content-Type",
                "X-*"
              ]
            }
          ]
        }
      }
    },
    "actionKnot": {
      "options": {
        "config": {
          "adapters": [
            {
              "name": "subscribe-competition",
              "address": "knotx.adapter.action.http",
              "params": {
                "path": "/service/mock/post-competition.json"
              },
              "allowedRequestHeaders": [
                "Cookie"
              ],
              "allowedResponseHeaders": [
                "Set-Cookie",
                "Location"
              ]
            },
            {
              "name": "subscribe-newsletter",
              "address": "knotx.adapter.action.http",
              "params": {
                "path": "/service/mock/post-newsletter.json"
              },
              "allowedRequestHeaders": [
                "Cookie"
              ],
              "allowedResponseHeaders": [
                "Set-Cookie",
                "Location"
              ]
            },
            {
              "name": "step1",
              "address": "knotx.adapter.action.http",
              "params": {
                "path": "/service/mock/post-step-1.json"
              },
              "allowedRequestHeaders": [
                "Cookie",
                "Content-Type",
                "Content-Length"
              ],
              "allowedResponseHeaders": [
                "Set-Cookie",
                "Location"
              ]
            },
            {
              "name": "step2",
              "address": "knotx.adapter.action.http",
              "params": {
                "path": "/service/mock/post-step-2.json"
              },
              "allowedRequestHeaders": [
                "Cookie",
                "Content-Type",
                "Content-Length"
              ],
              "allowedResponseHeaders": [
                "Set-Cookie",
                "Location"
              ]
            }
          ]
        }
      }
    },
    "serviceKnot": {
      "options": {
        "config": {
          "services": [
            {
              "name": "first-service",
              "address": "knotx.adapter.service.http",
              "params": {
                "path": "/service/mock/first.json"
              },
              "cacheKey": "first"
            },
            {
              "name": "second-service",
              "address": "knotx.adapter.service.http",
              "params": {
                "path": "/service/mock/second.json"
              }
            },
            {
              "name": "third-service",
              "address": "knotx.adapter.service.http",
              "params": {
                "path": "/service/mock/third.json"
              }
            },
            {
              "name": "labelsRepository",
              "address": "knotx.adapter.service.http"
            }
          ]
        }
      }
    },
    "serviceAdapter": {
      "options": {
        "config": {
          "clientOptions": {
            "logActivity": true
          }
        }
      }
    },
    "httpRepo": {
      "options": {
        "config": {
          "clientOptions": {
            "logActivity": true
          }
        }
      }
    }
  }
}
