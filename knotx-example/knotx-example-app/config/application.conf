modules = [
  "server=io.knotx.server.KnotxServerVerticle"
  "httpRepo=io.knotx.repository.http.HttpRepositoryConnectorVerticle"
  "fsRepo=io.knotx.repository.fs.FilesystemRepositoryConnectorVerticle"
  "splitter=io.knotx.splitter.FragmentSplitterVerticle"
  "assembler=io.knotx.knot.assembler.FragmentAssemblerVerticle"
  "hbsKnot=io.knotx.knot.templating.HandlebarsKnotVerticle"
  "serviceKnot=io.knotx.knot.service.ServiceKnotVerticle"
  "actionKnot=io.knotx.knot.action.ActionKnotVerticle"
  "serviceAdapter=io.knotx.adapter.service.http.HttpServiceAdapterVerticle"
  "actionAdapter=io.knotx.adapter.action.http.HttpActionAdapterVerticle"
  "repoMock=io.knotx.mocks.MockRemoteRepositoryVerticle"
  "serviceMock=io.knotx.mocks.MockServiceVerticle"
  "gatewayKnot=io.knotx.gateway.GatewayKnotVerticle"
  "reqProcessorKnot=io.knotx.gateway.RequestProcessorKnotVerticle"
  "respProviderKnot=io.knotx.gateway.ResponseProviderKnotVerticle"
]

repo {
  domain = localhost
  port = 3001
}

service {
  domain = localhost
  port = 3000
}

address {
  repo {
    fs = knotx.core.repository.filesystem
    http = knotx.core.repository.http
  }
  knot {
    action = knotx.knot.action
    service = knotx.knot.service
    hbs = knotx.knot.handlebars
    gateway = knotx.gateway.gatewayknot
    reqProcessor = knotx.gateway.requestprocessor
  }
  adapter {
    action = knotx.adapter.action.http
    service = knotx.adapter.service.http
  }
}

config {
  server {
    options.config.defaultFlow {
      include file("./config/includes/server-default-flow.conf")
    }
    options.config.customFlow {
      include file("./config/includes/server-custom-flow.conf")
    }
  }

  actionKnot {
    options.config {
      include file("./config/includes/action-knot-config.conf")
    }
  }

  reqProcessorKnot {
    options.config.address = ${address.knot.reqProcessor}
  }

  include file("./config/includes/action-adapter.conf")
  include file("./config/includes/service-knot.conf")
  include file("./config/includes/mocks.conf")

}
