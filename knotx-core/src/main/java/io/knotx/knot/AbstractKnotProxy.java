/*
 * Copyright (C) 2016 Cognifide Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.knotx.knot;

import com.google.common.collect.Sets;
import io.knotx.dataobjects.SnippetFragment;
import io.knotx.dataobjects.SnippetFragmentsContext;
import io.knotx.proxy.KnotProxy;
import io.reactivex.Single;
import io.vertx.core.AsyncResult;
import io.vertx.core.Future;
import io.vertx.core.Handler;
import io.vertx.core.logging.Logger;
import io.vertx.core.logging.LoggerFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import org.apache.commons.lang3.StringUtils;

/**
 * Abstract class that should be root for all custom knots
 */
public abstract class AbstractKnotProxy implements KnotProxy {

  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractKnotProxy.class);

  protected static final String DEFAULT_TRANSITION = "next";

  @Override
  public void process(
      SnippetFragmentsContext snippetFragmentsContext,
      Handler<AsyncResult<SnippetFragmentsContext>> result) {
    if (shouldProcess(snippetFragmentsContext)) {
      processRequest(snippetFragmentsContext)
          .subscribe(
              ctx -> result.handle(Future.succeededFuture(ctx)),
              error -> {
                LOGGER.error("Error happened during Knot Context processing", error);
                result.handle(Future.succeededFuture(processError(snippetFragmentsContext, error)));
              }
          );
    } else {
      snippetFragmentsContext
          .setTransition(StringUtils.isBlank(snippetFragmentsContext.getTransition()) ?
              DEFAULT_TRANSITION : snippetFragmentsContext.getTransition());
      result.handle(Future.succeededFuture(snippetFragmentsContext));
    }
  }

  /**
   * Consumes a {@link SnippetFragmentsContext} messages from the Server and returns modified,
   * processed context. Basically this method is responsible for the whole business logic that your
   * Knot will be performing.
   *
   * @param snippetFragmentsContext message from the Server with processing context.
   * @return a {@link Single} that emits a processed and modified {@link SnippetFragmentsContext}.
   */
  protected abstract Single<SnippetFragmentsContext> processRequest(
      SnippetFragmentsContext snippetFragmentsContext);

  /**
   * Method lets you decide whether the SnippetFragment should be processed by your Knot or not.
   *
   * @param fragment SnippetFragment to process - or skip  {@link SnippetFragment}.
   * @return <tt>true</tt> if this Knot should process current {@link SnippetFragment}.
   */
  protected boolean shouldProcess(SnippetFragment fragment) {
    return !fragment.failed() && shouldProcess(Sets.newHashSet(fragment.knots()));
  }

  /**
   * Method lets you decide whether the SnippetFragment with a given set of Knots should be
   * processed by your Knot or not
   *
   * @param knots set of all Knots names that occurred in the current {@link
   * SnippetFragmentsContext}.
   * @return <tt>true</tt> if this Knot should process current {@link SnippetFragmentsContext}.
   */
  protected abstract boolean shouldProcess(Set<String> knots);

  /**
   * Handles any Exception thrown during processing, and is responsible for preparing the proper
   * {@link SnippetFragmentsContext} on such occasions, these will simply finish processing flows,
   * as any error generated by a Knot will be immediately returned to the page visitor.
   *
   * @param snippetFragmentsContext current context.
   * @param error the error that just occurred.
   * @return context prepared with proper content that notifies about the error and incorrect
   * processing.
   */
  protected abstract SnippetFragmentsContext processError(
      SnippetFragmentsContext snippetFragmentsContext, Throwable error);

  private boolean shouldProcess(SnippetFragmentsContext context) {
    Set<String> knots = Optional.ofNullable(context)
        .map(SnippetFragmentsContext::getFragments)
        .map(this::getKnotSet)
        .orElse(Collections.emptySet());
    return shouldProcess(knots);
  }

  private Set<String> getKnotSet(List<SnippetFragment> fragments) {
    return
        fragments.stream()
            .map(SnippetFragment::knots)
            .flatMap(Collection::stream)
            .collect(Collectors.toSet());
  }
}
